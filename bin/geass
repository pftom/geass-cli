#!/usr/bin/env node

const commander = require('commander');
const spawn = require('cross-spawn');
const path = require('path');
const fs = require('fs');

// Notify update when process exits
const updateNotifier = require('update-notifier');
const pkg = require('../package.json');

updateNotifier({ pkg }).notify();

// the print detail help function
function printHelp() {
  console.log();
  console.log('  Commands:');
  console.log();
  console.log('     new           Create a new application (args: appName)');
  console.log('     generate      Generate a new standard component (short-cut: "g", args: componentName)');
  console.log('     test          Generate a suit of tests for a component (args: "componentName")');
  console.log();
  console.log('All commands can be run with -h (or --help) for more information.');
}

// judge a command is valid and executable and return the executable file
function executable(subCmd) {
  const file = path.join(__dirname, `geass-${subCmd}`);

  if (fs.existsSync(file)) {
    return file;
  }

  return false;
}

// when close, listen on exit code
function wrapExit(thread) {
  thread.on('close', (code) => {
    process.exit(code);
  });
}

// define the CLI basic version show up and usage
commander
  .version(pkg.version, '-v, --version')
  .usage('<command> [options]')
  .on('--help', printHelp)
  .parse(process.argv);

// different command execute different bin
const aliases = {
  g: 'generate',
};

console.log('command', commander.args);
let subCmd = commander.args[0];
const args = commander.args[1];

// the short-cut about generate
if (aliases[subCmd] !== undefined) {
  subCmd = aliases[subCmd];
}

// if subCmd is not exist
if (!subCmd) {
  commander.help();
} else {
  const bin = executable(subCmd);
  if (bin) {
    console.log(bin);
    // wrapExit(spawn(bin, args, { stdio: 'inherit' }));
  } else {
    commander.help();
  }
}
